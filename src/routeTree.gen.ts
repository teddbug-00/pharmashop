/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedSalesRouteImport } from './routes/_authenticated/sales'
import { Route as AuthenticatedMedicinesRouteImport } from './routes/_authenticated/medicines'
import { Route as AuthenticatedAdminRouteImport } from './routes/_authenticated/_admin'
import { Route as AuthenticatedAdminUsersRouteImport } from './routes/_authenticated/_admin/users'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSalesRoute = AuthenticatedSalesRouteImport.update({
  id: '/sales',
  path: '/sales',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedMedicinesRoute = AuthenticatedMedicinesRouteImport.update({
  id: '/medicines',
  path: '/medicines',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAdminRoute = AuthenticatedAdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAdminUsersRoute = AuthenticatedAdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedAdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/medicines': typeof AuthenticatedMedicinesRoute
  '/sales': typeof AuthenticatedSalesRoute
  '/': typeof AuthenticatedIndexRoute
  '/users': typeof AuthenticatedAdminUsersRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/medicines': typeof AuthenticatedMedicinesRoute
  '/sales': typeof AuthenticatedSalesRoute
  '/': typeof AuthenticatedIndexRoute
  '/users': typeof AuthenticatedAdminUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/_admin': typeof AuthenticatedAdminRouteWithChildren
  '/_authenticated/medicines': typeof AuthenticatedMedicinesRoute
  '/_authenticated/sales': typeof AuthenticatedSalesRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/_admin/users': typeof AuthenticatedAdminUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/medicines' | '/sales' | '/' | '/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/medicines' | '/sales' | '/' | '/users'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/_admin'
    | '/_authenticated/medicines'
    | '/_authenticated/sales'
    | '/_authenticated/'
    | '/_authenticated/_admin/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/sales': {
      id: '/_authenticated/sales'
      path: '/sales'
      fullPath: '/sales'
      preLoaderRoute: typeof AuthenticatedSalesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/medicines': {
      id: '/_authenticated/medicines'
      path: '/medicines'
      fullPath: '/medicines'
      preLoaderRoute: typeof AuthenticatedMedicinesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_admin': {
      id: '/_authenticated/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedAdminRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_admin/users': {
      id: '/_authenticated/_admin/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedAdminUsersRouteImport
      parentRoute: typeof AuthenticatedAdminRoute
    }
  }
}

interface AuthenticatedAdminRouteChildren {
  AuthenticatedAdminUsersRoute: typeof AuthenticatedAdminUsersRoute
}

const AuthenticatedAdminRouteChildren: AuthenticatedAdminRouteChildren = {
  AuthenticatedAdminUsersRoute: AuthenticatedAdminUsersRoute,
}

const AuthenticatedAdminRouteWithChildren =
  AuthenticatedAdminRoute._addFileChildren(AuthenticatedAdminRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedAdminRoute: typeof AuthenticatedAdminRouteWithChildren
  AuthenticatedMedicinesRoute: typeof AuthenticatedMedicinesRoute
  AuthenticatedSalesRoute: typeof AuthenticatedSalesRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAdminRoute: AuthenticatedAdminRouteWithChildren,
  AuthenticatedMedicinesRoute: AuthenticatedMedicinesRoute,
  AuthenticatedSalesRoute: AuthenticatedSalesRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
