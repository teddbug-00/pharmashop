/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/medicines/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all medicines
         * @description Retrieves a paginated list of all medicines with summary inventory data.
         */
        get: operations["get_all_medicines_medicines__get"];
        put?: never;
        /**
         * Add a new medicine with its first batch
         * @description Adds a new medicine to the inventory.
         *
         *     If a medicine with the same name already exists, it will raise an error.
         *     A new medicine must be accompanied by its first batch details.
         */
        post: operations["add_new_medicine_medicines__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medicines/{medicine_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single medicine by ID
         * @description Retrieves the details of a single medicine, including all its batches.
         */
        get: operations["get_medicine_by_id_medicines__medicine_id__get"];
        /**
         * Update a medicine
         * @description Update a medicine's details, such as name, category, or selling price.
         */
        put: operations["update_medicine_medicines__medicine_id__put"];
        post?: never;
        /**
         * Delete a medicine
         * @description Deletes a medicine and all its associated batches from the inventory.
         */
        delete: operations["delete_medicine_medicines__medicine_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medicines/{medicine_id}/batches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a new batch to a medicine
         * @description Adds a new batch of stock to an existing medicine.
         */
        post: operations["add_new_batch_to_medicine_medicines__medicine_id__batches_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all sales
         * @description Retrieves a paginated list of all sales transactions, ordered by the most recent first.
         */
        get: operations["get_all_sales_sales__get"];
        put?: never;
        /**
         * Create a new sale
         * @description Processes a new sale transaction.
         *
         *     This endpoint takes a list of medicines and quantities, validates stock,
         *     updates the inventory (decrementing from batches expiring soonest first),
         *     and records the sale. The entire operation is a single database transaction.
         */
        post: operations["create_new_sale_sales__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/{sale_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single sale by ID
         * @description Retrieves the details of a single sale, including all its line items.
         */
        get: operations["get_sale_by_id_sales__sale_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dashboard statistics
         * @description Retrieves key performance indicators for the dashboard, such as total
         *     sales for today and the number of items with low stock.
         */
        get: operations["get_dashboard_stats_dashboard_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/low-stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a report of low-stock items
         * @description Retrieves a list of all medicines where the total quantity is at or
         *     below the specified threshold.
         */
        get: operations["get_low_stock_report_dashboard_low_stock_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/expiring-soon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a report of batches expiring soon
         * @description Retrieves a list of all medicine batches that will expire within the
         *     specified number of days.
         */
        get: operations["get_expiring_soon_report_dashboard_expiring_soon_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register User */
        post: operations["register_user_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login For Access Token */
        post: operations["login_for_access_token_auth_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all users (Admin only)
         * @description Retrieve a paginated list of all users.
         */
        get: operations["get_all_users_users__get"];
        put?: never;
        /**
         * Create a new user (Admin only)
         * @description Create a new user with a specified role. This endpoint is restricted to admins.
         */
        post: operations["create_user_by_admin_users__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single user by ID (Admin only)
         * @description Retrieve the details of a single user.
         */
        get: operations["get_user_by_id_users__user_id__get"];
        /**
         * Update a user (Admin only)
         * @description Update a user's details, such as their username or role.
         */
        put: operations["update_user_users__user_id__put"];
        post?: never;
        /**
         * Delete a user (Admin only)
         * @description Delete a user from the system.
         */
        delete: operations["delete_user_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_login_for_access_token_auth_token_post */
        Body_login_for_access_token_auth_token_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /**
             * Client Secret
             * Format: password
             */
            client_secret?: string | null;
        };
        /**
         * Category
         * @description Represents a category of medicine
         * @enum {string}
         */
        Category: "painkiller" | "antibiotic" | "supplement" | "antibacterial" | "antiseptic" | "other";
        /** DashboardStats */
        DashboardStats: {
            /** Total Sales Today */
            total_sales_today: string;
            /** Total Medicines */
            total_medicines: number;
            /** Low Stock Items Count */
            low_stock_items_count: number;
        };
        /** ExpiringBatchItem */
        ExpiringBatchItem: {
            /** Medicine Id */
            medicine_id: number;
            /** Medicine Name */
            medicine_name: string;
            /** Batch Id */
            batch_id: number;
            /** Batch Number */
            batch_number: string | null;
            /**
             * Expiry Date
             * Format: date
             */
            expiry_date: string;
            /** Quantity Remaining */
            quantity_remaining: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** MedicineBatchCreate */
        MedicineBatchCreate: {
            /** Batch Number */
            batch_number?: string | null;
            /**
             * Expiry Date
             * Format: date
             */
            expiry_date: string;
            /** Cost Price */
            cost_price: number | string;
            /**
             * Quantity
             * @description The initial quantity of the batch, must be positive.
             */
            quantity: number;
        };
        /** MedicineBatchPublic */
        MedicineBatchPublic: {
            /** Batch Number */
            batch_number?: string | null;
            /**
             * Expiry Date
             * Format: date
             */
            expiry_date: string;
            /** Cost Price */
            cost_price: string;
            /** Id */
            id: number;
            /**
             * Date Added
             * Format: date-time
             */
            date_added: string;
            /** Is Expired */
            is_expired: boolean;
            /**
             * Quantity
             * @description The current quantity of the batch.
             */
            quantity: number;
        };
        /** MedicineCreate */
        MedicineCreate: {
            /** Name */
            name: string;
            /** @default other */
            category: components["schemas"]["Category"];
            /** Selling Price */
            selling_price: number | string;
            batch: components["schemas"]["MedicineBatchCreate"];
        };
        /** MedicineInList */
        MedicineInList: {
            /** Name */
            name: string;
            /** @default other */
            category: components["schemas"]["Category"];
            /** Selling Price */
            selling_price: string;
            /** Id */
            id: number;
            /** Total Quantity */
            total_quantity: number;
            /** Earliest Expiry */
            earliest_expiry: string | null;
        };
        /** MedicinePublic */
        MedicinePublic: {
            /** Name */
            name: string;
            /** @default other */
            category: components["schemas"]["Category"];
            /** Selling Price */
            selling_price: string;
            /** Id */
            id: number;
            /**
             * Batches
             * @default []
             */
            batches: components["schemas"]["MedicineBatchPublic"][];
            /** Total Quantity */
            total_quantity: number;
            /** Earliest Expiry */
            earliest_expiry: string | null;
        };
        /** MedicineUpdate */
        MedicineUpdate: {
            /** Name */
            name?: string | null;
            category?: components["schemas"]["Category"] | null;
            /** Selling Price */
            selling_price?: number | string | null;
        };
        /** SaleCreate */
        SaleCreate: {
            /** Items */
            items: components["schemas"]["SaleItemCreate"][];
        };
        /** SaleInList */
        SaleInList: {
            /** Id */
            id: number;
            /**
             * Sale Date
             * Format: date-time
             */
            sale_date: string;
            /** Total Amount */
            total_amount: number;
        };
        /** SaleItemCreate */
        SaleItemCreate: {
            /** Medicine Id */
            medicine_id: number;
            /** Quantity */
            quantity: number;
        };
        /** SaleItemPublic */
        SaleItemPublic: {
            /** Medicine Id */
            medicine_id: number;
            /** Quantity */
            quantity: number;
            /** Id */
            id: number;
            /** Price Per Unit */
            price_per_unit: string;
            /** Medicine Name */
            readonly medicine_name: string;
        };
        /** SalePublic */
        SalePublic: {
            /** Id */
            id: number;
            /**
             * Sale Date
             * Format: date-time
             */
            sale_date: string;
            /** Total Amount */
            total_amount: string;
            /** Items */
            items: components["schemas"]["SaleItemPublic"][];
        };
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /** UserCreate */
        UserCreate: {
            /** Username */
            username: string;
            /** Password */
            password: string;
        };
        /** UserCreateWithRole */
        UserCreateWithRole: {
            /** Username */
            username: string;
            /** Password */
            password: string;
            /** @default seller */
            role: components["schemas"]["UserRole"];
        };
        /** UserPublic */
        UserPublic: {
            /** Username */
            username: string;
            /** Id */
            id: number;
            role: components["schemas"]["UserRole"];
        };
        /**
         * UserRole
         * @enum {string}
         */
        UserRole: "admin" | "seller";
        /** UserUpdate */
        UserUpdate: {
            /** Username */
            username?: string | null;
            role?: components["schemas"]["UserRole"] | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_all_medicines_medicines__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicineInList"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_new_medicine_medicines__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicineCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicinePublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_medicine_by_id_medicines__medicine_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medicine_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicinePublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_medicine_medicines__medicine_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medicine_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicineUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicinePublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_medicine_medicines__medicine_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medicine_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_new_batch_to_medicine_medicines__medicine_id__batches_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medicine_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicineBatchCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicinePublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_sales_sales__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaleInList"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_new_sale_sales__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SaleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SalePublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sale_by_id_sales__sale_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sale_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SalePublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_dashboard_stats_dashboard_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardStats"];
                };
            };
        };
    };
    get_low_stock_report_dashboard_low_stock_get: {
        parameters: {
            query?: {
                threshold?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicineInList"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_expiring_soon_report_dashboard_expiring_soon_get: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpiringBatchItem"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_user_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_for_access_token_auth_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_for_access_token_auth_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_users_users__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_by_admin_users__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreateWithRole"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_by_id_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_users__user_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
